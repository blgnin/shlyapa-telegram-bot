import asyncio
import logging
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from config import BOT1_TOKEN, BOT2_TOKEN, CHAT_ID, BOT1_NAME, BOT2_NAME
from ai_handler import AIHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class BotManager:
    def __init__(self):
        try:
            self.bot1 = Bot(token=BOT1_TOKEN)
            self.bot2 = Bot(token=BOT2_TOKEN)
            self.ai_handler = AIHandler()
            self.conversation_active = False
            self.current_speaker = None
            logger.info(f"‚úÖ –ë–æ—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {BOT1_NAME}, {BOT2_NAME}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–æ–≤: {e}")
            raise
        
    async def start_conversation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏"""
        try:
            self.conversation_active = True
            self.current_speaker = BOT1_NAME
            
            # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞
            first_message = await self.ai_handler.generate_response(
                "–ù–∞—á–Ω–∏ –¥—Ä—É–∂–µ—Å–∫—É—é –±–µ—Å–µ–¥—É", 
                BOT1_NAME
            )
            
            await self.bot1.send_message(chat_id=CHAT_ID, text=first_message)
            logger.info(f"üí¨ {BOT1_NAME}: {first_message}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            await self.conversation_loop()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {e}")
    
    async def conversation_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏"""
        try:
            conversation_count = 0
            max_exchanges = 10  # –ú–∞–∫—Å–∏–º—É–º –æ–±–º–µ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            
            while self.conversation_active and conversation_count < max_exchanges:
                await asyncio.sleep(15)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç
                if self.current_speaker == BOT1_NAME:
                    responding_bot = self.bot2
                    responding_name = BOT2_NAME
                    self.current_speaker = BOT2_NAME
                else:
                    responding_bot = self.bot1
                    responding_name = BOT1_NAME
                    self.current_speaker = BOT1_NAME
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                context = self.ai_handler.get_context()
                response = await self.ai_handler.generate_response(
                    "–ü—Ä–æ–¥–æ–ª–∂–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ", 
                    responding_name,
                    context
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await responding_bot.send_message(chat_id=CHAT_ID, text=response)
                logger.info(f"üí¨ {responding_name}: {response}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.ai_handler.add_to_history(response, responding_name)
                
                conversation_count += 1
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {e}")
            self.conversation_active = False
    
    async def stop_conversation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä"""
        self.conversation_active = False
        await update.message.reply_text("üõë –†–∞–∑–≥–æ–≤–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        logger.info("üõë –†–∞–∑–≥–æ–≤–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def setup_applications(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            app1 = Application.builder().token(BOT1_TOKEN).build()
            app2 = Application.builder().token(BOT2_TOKEN).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            app1.add_handler(CommandHandler("start_chat", self.start_conversation))
            app1.add_handler(CommandHandler("stop_chat", self.stop_conversation))
            
            app2.add_handler(CommandHandler("start_chat", self.start_conversation))
            app2.add_handler(CommandHandler("stop_chat", self.stop_conversation))
            
            logger.info("‚úÖ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return app1, app2
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {e}")
            raise
    
    async def run_bots(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–æ–≤"""
        try:
            app1, app2 = await self.setup_applications()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            await app1.initialize()
            await app2.initialize()
            
            await app1.start()
            await app2.start()
            
            logger.info("üöÄ –ë–æ—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(5)
            await self.start_conversation(None, None)
            
            # –î–µ—Ä–∂–∏–º –±–æ—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã–º–∏
            while True:
                await asyncio.sleep(1)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–æ–≤: {e}")
            raise
