"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏
"""
import psutil
import os
import logging
from datetime import datetime
from typing import Dict, Optional

logger = logging.getLogger(__name__)

class ResourceMonitor:
    def __init__(self):
        self.memory_threshold = 450  # MB (–∏–∑ 512 MB –ª–∏–º–∏—Ç–∞)
        self.cpu_threshold = 80      # %
        self.bot3_disabled = False   # –§–ª–∞–≥ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ç—Ä–µ—Ç—å–µ–≥–æ –±–æ—Ç–∞
        
    def get_memory_usage(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ MB"""
        try:
            process = psutil.Process(os.getpid())
            return process.memory_info().rss / 1024 / 1024  # –í MB
        except Exception:
            return 0.0
    
    def get_cpu_usage(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU –≤ %"""
        try:
            return psutil.cpu_percent(interval=1)
        except Exception:
            return 0.0
    
    def check_resources(self) -> Dict[str, any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å"""
        memory_mb = self.get_memory_usage()
        cpu_percent = self.get_cpu_usage()
        
        status = {
            "memory_mb": round(memory_mb, 1),
            "memory_percent": round((memory_mb / 512) * 100, 1),
            "cpu_percent": round(cpu_percent, 1),
            "memory_critical": memory_mb > self.memory_threshold,
            "cpu_critical": cpu_percent > self.cpu_threshold,
            "bot3_disabled": self.bot3_disabled,
            "timestamp": datetime.now().isoformat()
        }
        
        return status
    
    def should_disable_bot3(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å —Ç—Ä–µ—Ç—å–µ–≥–æ –±–æ—Ç–∞"""
        status = self.check_resources()
        
        # –ï—Å–ª–∏ –ø–∞–º—è—Ç—å –∫—Ä–∏—Ç–∏—á–Ω–∞ –∏ –±–æ—Ç3 –µ—â–µ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω
        if status["memory_critical"] and not self.bot3_disabled:
            logger.warning(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {status['memory_mb']} MB")
            logger.warning(f"üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–∫–ª—é—á–∏—Ç—å —Ç—Ä–µ—Ç—å–µ–≥–æ –±–æ—Ç–∞")
            return True
            
        return False
    
    def should_enable_bot3(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∏—Ç—å —Ç—Ä–µ—Ç—å–µ–≥–æ –±–æ—Ç–∞"""
        status = self.check_resources()
        
        # –ï—Å–ª–∏ –ø–∞–º—è—Ç—å –≤ –Ω–æ—Ä–º–µ –∏ –±–æ—Ç3 –æ—Ç–∫–ª—é—á–µ–Ω
        if not status["memory_critical"] and self.bot3_disabled:
            if status["memory_mb"] < 350:  # –ó–∞–ø–∞—Å –≤ 150 MB
                logger.info(f"‚úÖ –ü–∞–º—è—Ç—å –≤ –Ω–æ—Ä–º–µ: {status['memory_mb']} MB")
                logger.info(f"üîß –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å —Ç—Ä–µ—Ç—å–µ–≥–æ –±–æ—Ç–∞")
                return True
                
        return False
    
    def disable_bot3(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –±–æ—Ç–∞"""
        self.bot3_disabled = True
        logger.warning("üî¥ –¢—Ä–µ—Ç–∏–π –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤")
    
    def enable_bot3(self):
        """–í–∫–ª—é—á–∞–µ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –±–æ—Ç–∞"""
        self.bot3_disabled = False
        logger.info("üü¢ –¢—Ä–µ—Ç–∏–π –±–æ—Ç –≤–∫–ª—é—á–µ–Ω")
    
    def get_recommendations(self) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        status = self.check_resources()
        recommendations = []
        
        if status["memory_critical"]:
            recommendations.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ - –æ—Ç–∫–ª—é—á–∏—Ç–µ —Ç—Ä–µ—Ç—å–µ–≥–æ –±–æ—Ç–∞")
        
        if status["cpu_critical"]:
            recommendations.append("–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ CPU - —É–º–µ–Ω—å—à–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É AI –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        if status["memory_percent"] > 70:
            recommendations.append("–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω")
        
        if not recommendations:
            recommendations.append("–†–µ—Å—É—Ä—Å—ã –≤ –Ω–æ—Ä–º–µ")
        
        return recommendations

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
resource_monitor = ResourceMonitor()
