"""
–í–µ–±-—Å–µ—Ä–≤–µ—Ä —Å keep-alive –¥–ª—è Render.com
–†–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å Telegram –±–æ—Ç–∞–º–∏
"""
import asyncio
from aiohttp import web
import aiohttp
import os
import logging
import time
from datetime import datetime

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
app_status = {
    "start_time": datetime.now(),
    "last_ping": None,
    "ping_count": 0,
    "bots_active": False
}

async def handle_root(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ URL."""
    logger.info("Received request for /")
    uptime = datetime.now() - app_status["start_time"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
    try:
        from resource_monitor import resource_monitor
        from bot_activity_logger import activity_logger
        
        resources = resource_monitor.check_resources()
        daily_activity = activity_logger.get_daily_summary()
        weekly_activity = activity_logger.get_weekly_summary()
        recommendations = resource_monitor.get_recommendations()
    except Exception:
        resources = {"error": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
        daily_activity = {"messages": 0, "ai_requests": 0}
        weekly_activity = {"messages": 0, "ai_requests": 0}
        recommendations = ["–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"]
    
    status = {
        "status": "‚úÖ Telegram Userbot System —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "service": "shlyapa-bot",
        "bots": ["Daniel", "Leonardo", "–ê–ª–µ–≤—Ç–∏–Ω–∞"],
        "environment": "Render.com Production",
        "uptime_seconds": int(uptime.total_seconds()),
        "uptime_readable": str(uptime).split('.')[0],
        "last_ping": app_status["last_ping"].isoformat() if app_status["last_ping"] else None,
        "ping_count": app_status["ping_count"],
        "bots_active": app_status["bots_active"],
        "port": os.environ.get("PORT", "8000"),
        "timestamp": datetime.now().isoformat(),
        "resources": resources,
        "activity_today": daily_activity,
        "activity_week": weekly_activity,
        "recommendations": recommendations
    }
    return web.json_response(status)

async def handle_health(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è."""
    logger.info("Received request for /health")
    app_status["last_ping"] = datetime.now()
    app_status["ping_count"] += 1
    return web.Response(text="OK")

async def handle_ping(request):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è self-ping."""
    app_status["last_ping"] = datetime.now()
    app_status["ping_count"] += 1
    return web.json_response({
        "status": "pong",
        "timestamp": datetime.now().isoformat(),
        "ping_count": app_status["ping_count"]
    })

async def self_ping_task():
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∏–Ω–≥–∞ –∫–∞–∂–¥—ã–µ 14 –º–∏–Ω—É—Ç."""
    await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
    
    while True:
        try:
            # –ñ–¥–µ–º 14 –º–∏–Ω—É—Ç (840 —Å–µ–∫—É–Ω–¥)
            await asyncio.sleep(840)
            
            port = os.environ.get("PORT", "8000")
            url = f"http://localhost:{port}/ping"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=10) as response:
                    if response.status == 200:
                        logger.info("‚úÖ Self-ping —É—Å–ø–µ—à–µ–Ω")
                    else:
                        logger.warning(f"‚ö†Ô∏è Self-ping –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ self-ping: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

def start_web_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ."""
    app = web.Application()
    app.router.add_get('/', handle_root)
    app.router.add_get('/health', handle_health)
    app.router.add_get('/ping', handle_ping)
    
    port = int(os.environ.get("PORT", 8000))
    logger.info(f"Starting web server on port {port}")
    
    runner = web.AppRunner(app)
    asyncio.create_task(runner.setup())
    site = web.TCPSite(runner, '0.0.0.0', port)
    asyncio.create_task(site.start())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É self-ping
    asyncio.create_task(self_ping_task())
    
    logger.info(f"Web server started on http://0.0.0.0:{port}")
    logger.info("üîÑ Self-ping –∑–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 14 –º–∏–Ω—É—Ç)")
    return runner

if __name__ == "__main__":
    start_web_server()
    
    # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–Ω—ã–º
    try:
        while True:
            import time
            time.sleep(1)
    except KeyboardInterrupt:
        print("üõë –í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
