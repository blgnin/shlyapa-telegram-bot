"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
"""
import os
import re
import json

# –°–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
COMPETITORS = [
    'blablacar', '–±–ª–∞–±–ª–∞–∫–∞—Ä', 'BlaBlaCar', '–ë–ª–∞–ë–ª–∞–ö–∞—Ä',
    'uber', 'Uber', 'UBER', '—É–±–µ—Ä', '–£–±–µ—Ä',
    'yandex', '—è–Ω–¥–µ–∫—Å', '–Ø–Ω–¥–µ–∫—Å', 'Yandex',
    'bolt', 'Bolt', '–±–æ–ª—Ç', '–ë–æ–ª—Ç',
    'nas taxi', 'na≈° taxi', 'Na≈° taxi', 'HaloTaxi', 'Hello Taxi',
    'red taxi', 'lider taxi', 'pg taxi', 'Pg taxi',
    'TeslaGoApp', 'teslagoapp'
]

def clean_text_file(file_path):
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –æ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_content = content
        
        # –£–¥–∞–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
        for competitor in COMPETITORS:
            # –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
            content = re.sub(rf"['\"]?{re.escape(competitor)}['\"]?,?\s*", '', content, flags=re.IGNORECASE)
            # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –∫–æ—Å–≤–µ–Ω–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            content = re.sub(rf"\b{re.escape(competitor)}\b", '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', content, flags=re.IGNORECASE)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ –∏ –ø—Ä–æ–±–µ–ª—ã
        content = re.sub(r',\s*,', ',', content)
        content = re.sub(r',\s*]', ']', content)
        content = re.sub(r'\[\s*,', '[', content)
        
        if content != original_content:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"‚úÖ –û—á–∏—â–µ–Ω: {file_path}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {file_path}: {e}")

def clean_json_file(file_path):
    """–û—á–∏—â–∞–µ—Ç JSON —Ñ–∞–π–ª –æ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        original_data = json.dumps(data, ensure_ascii=False)
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ JSON
        def clean_json_recursive(obj):
            if isinstance(obj, dict):
                return {k: clean_json_recursive(v) for k, v in obj.items()}
            elif isinstance(obj, list):
                cleaned_list = []
                for item in obj:
                    cleaned_item = clean_json_recursive(item)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
                    if isinstance(cleaned_item, str):
                        has_competitor = any(competitor.lower() in cleaned_item.lower() 
                                           for competitor in COMPETITORS)
                        if not has_competitor:
                            cleaned_list.append(cleaned_item)
                    else:
                        cleaned_list.append(cleaned_item)
                return cleaned_list
            elif isinstance(obj, str):
                cleaned = obj
                for competitor in COMPETITORS:
                    cleaned = re.sub(rf"\b{re.escape(competitor)}\b", 'GO-—Å–µ—Ä–≤–∏—Å', cleaned, flags=re.IGNORECASE)
                return cleaned
            else:
                return obj
        
        cleaned_data = clean_json_recursive(data)
        
        if json.dumps(cleaned_data, ensure_ascii=False) != original_data:
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(cleaned_data, f, ensure_ascii=False, indent=2)
            print(f"‚úÖ –û—á–∏—â–µ–Ω JSON: {file_path}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ JSON {file_path}: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
    print("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –æ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤...")
    
    # –§–∞–π–ª—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    files_to_clean = [
        'ai_handler.py',
        'natural_speech_handler.py',
        'bot_prompts.py',
        'quotes.py',
        'gominiapp_topics.py'
    ]
    
    # JSON —Ñ–∞–π–ª—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    json_files = [
        'kursor_bot_sasha/natural_speech/conversation_starters.json',
        'kursor_bot_sasha/natural_speech/statements.json',
        'kursor_bot_sasha/natural_speech/questions.json',
        'kursor_bot_sasha/natural_speech/emotional.json'
    ]
    
    # –û—á–∏—â–∞–µ–º Python —Ñ–∞–π–ª—ã
    for file_path in files_to_clean:
        if os.path.exists(file_path):
            clean_text_file(file_path)
    
    # –û—á–∏—â–∞–µ–º JSON —Ñ–∞–π–ª—ã
    for file_path in json_files:
        if os.path.exists(file_path):
            clean_json_file(file_path)
    
    print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üìù –í—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ 'GO-—Å–µ—Ä–≤–∏—Å' –∏–ª–∏ —É–¥–∞–ª–µ–Ω—ã")

if __name__ == "__main__":
    main()
