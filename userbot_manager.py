import asyncio
import logging
import random
from datetime import datetime, timedelta
from telethon import TelegramClient, events
from telethon.tl.types import PeerUser, PeerChat
from config import BOT1_TOKEN, BOT2_TOKEN, BOT3_TOKEN, CHAT_ID, BOT1_NAME, BOT2_NAME, BOT3_NAME
from ai_handler import AIHandler
from auto_conversation_topics import get_unused_topic

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class UserBotManager:
    def _safe_increment_counter(self, bot_name):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞"""
        if bot_name not in self.message_counters:
            self.message_counters[bot_name] = 0
            logger.info(f"üîß –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –±–æ—Ç–∞: '{bot_name}'")
        self.message_counters[bot_name] += 1
        return self.message_counters[bot_name]

    def __init__(self):
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è —é–∑–µ—Ä-–±–æ—Ç–æ–≤
            self.client1 = TelegramClient('session1', api_id=2040, api_hash='b18441a1ff607e10a989891a5462e627')
            self.client2 = TelegramClient('session2', api_id=2040, api_hash='b18441a1ff607e10a989891a5462e627')
            self.client3 = TelegramClient('session3', api_id=2040, api_hash='b18441a1ff607e10a989891a5462e627')
            
            self.ai_handler = AIHandler()
            self.conversation_active = False
            self.current_speaker = None
            self.response_times = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
            self.is_responding = {}  # –°–ª–æ–≤–∞—Ä—å —Ñ–ª–∞–≥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
            self.conversation_history = []  # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            self.message_counters = {BOT1_NAME: 0, BOT2_NAME: 0, BOT3_NAME: 0}  # –°—á–µ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ü–∏—Ç–∞—Ç –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self.message_queue = {BOT1_NAME: [], BOT2_NAME: [], BOT3_NAME: []}  # –û—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
            self.user_message_queue = []  # –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ –±–æ—Ç–∞–º–∏)
            self.processing_user_messages = False  # –§–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            self.processed_messages = set()  # –ö—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±–µ—Å–µ–¥—ã –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏
            self.auto_conversation_active = False  # –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–π –∞–≤—Ç–æ–±–µ—Å–µ–¥—ã
            self.auto_conversation_count = 0  # –°—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—É—â–µ–π –∞–≤—Ç–æ–±–µ—Å–µ–¥–µ
            self.auto_conversation_start_time = None  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–π –∞–≤—Ç–æ–±–µ—Å–µ–¥—ã
            self.last_auto_conversation_time = None  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–≤—Ç–æ–±–µ—Å–µ–¥—ã
            self.next_auto_conversation_time = None  # –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –∞–≤—Ç–æ–±–µ—Å–µ–¥—ã
            self.bot_to_bot_messages_15min = {BOT1_NAME: [], BOT2_NAME: [], BOT3_NAME: []}  # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
            self.auto_conversation_task = None  # –ó–∞–¥–∞—á–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–±–µ—Å–µ–¥
            self.used_conversation_topics = []  # –°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–º –¥–ª—è –∞–≤—Ç–æ–±–µ—Å–µ–¥
            

            
            logger.info(f"‚úÖ –Æ–∑–µ—Ä-–±–æ—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {BOT1_NAME}, {BOT2_NAME}, {BOT3_NAME}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —é–∑–µ—Ä-–±–æ—Ç–æ–≤: {e}")
            raise
    

    
    async def start_conversation(self, event):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –º–µ–∂–¥—É —é–∑–µ—Ä-–±–æ—Ç–∞–º–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞
            if str(event.chat_id) != str(CHAT_ID):
                logger.info(f"üö´ –ö–æ–º–∞–Ω–¥–∞ /start –Ω–µ –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞: {event.chat_id} != {CHAT_ID}")
                return
            
            if self.conversation_active:
                await event.reply("üîÑ –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞!")
                return
            
            logger.info("üé¨ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —é–∑–µ—Ä-–±–æ—Ç–æ–≤...")
            self.conversation_active = True
            self.current_speaker = BOT1_NAME
            self.ai_handler.clear_history()
            self.conversation_history = []  # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
            self.message_counters = {BOT1_NAME: 0, BOT2_NAME: 0, BOT3_NAME: 0}  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            self.message_queue = {BOT1_NAME: [], BOT2_NAME: [], BOT3_NAME: []}  # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            self.user_message_queue = []  # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.processing_user_messages = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self.processed_messages.clear()  # –û—á–∏—â–∞–µ–º –∫—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ–±–µ—Å–µ–¥
            self.auto_conversation_active = False
            self.auto_conversation_count = 0
            self.auto_conversation_start_time = None
            self.bot_to_bot_messages_15min = {BOT1_NAME: [], BOT2_NAME: [], BOT3_NAME: []}
            self.used_conversation_topics = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –∞–≤—Ç–æ–±–µ—Å–µ–¥—É
            await self.schedule_next_auto_conversation()
            
            await event.reply("üéâ –°–∏—Å—Ç–µ–º–∞ —é–∑–µ—Ä-–±–æ—Ç–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –ë–æ—Ç—ã –±—É–¥—É—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é 'Reply' (–æ—Ç–≤–µ—Ç–∏—Ç—å) –≤ Telegram –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏
            await self.start_bot_conversation()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
            await event.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã")
    
    async def stop_conversation(self, event):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –º–µ–∂–¥—É —é–∑–µ—Ä-–±–æ—Ç–∞–º–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞
            if str(event.chat_id) != str(CHAT_ID):
                logger.info(f"üö´ –ö–æ–º–∞–Ω–¥–∞ /stop –Ω–µ –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞: {event.chat_id} != {CHAT_ID}")
                return
            
            self.conversation_active = False
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–±–µ—Å–µ–¥—ã
            if self.auto_conversation_task:
                self.auto_conversation_task.cancel()
                self.auto_conversation_task = None
                logger.info("‚è∞ –ê–≤—Ç–æ–±–µ—Å–µ–¥—ã –æ—Ç–º–µ–Ω–µ–Ω—ã")
            
            self.auto_conversation_active = False
            self.auto_conversation_count = 0
            self.auto_conversation_start_time = None
            
            await event.reply("‚èπÔ∏è –†–∞–∑–≥–æ–≤–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            logger.info("üõë –†–∞–∑–≥–æ–≤–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {e}")
    
    async def start_bot_conversation(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏"""
        try:
            if not self.conversation_active:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç –ø–æ ID
            try:
                chat = await self.client1.get_entity(CHAT_ID)
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —á–∞—Ç: {CHAT_ID}")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç –ø–æ ID {CHAT_ID}: {e}")
                return
            
            # Daniel –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –û–î–ù–û —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            daniel_message = "–ü—Ä–∏–≤–µ—Ç! Lexus –≥–æ—Ç–æ–≤ –∫ –ø–æ–µ–∑–¥–∫–∞–º, —Å–∞–º —Å—Ç–∞–≤–ª—é —Ü–µ–Ω—ã. –ö–∞–∫ –¥–µ–ª–∞?"
            logger.info(f"üöÄ {BOT1_NAME} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ï–î–ò–ù–°–¢–í–ï–ù–ù–û–ï —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            await self.client1.send_message(chat, daniel_message)
            logger.info(f"‚úÖ {BOT1_NAME} –æ—Ç–ø—Ä–∞–≤–∏–ª –û–î–ù–û —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            
            # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ (–±–æ—Ç-–±–æ—Ç –æ–±—â–µ–Ω–∏–µ)
            await asyncio.sleep(30)
            
            # Leonardo –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –û–î–ù–û —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç
            leonardo_message = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –ø–∞—Å—Å–∞–∂–∏—Ä, –æ–±–æ–∂–∞—é –≥–∏–±–∫–∏–µ —Ü–µ–Ω—ã. –ù–∏–∫–∞–∫–∏—Ö –∫–æ–º–∏—Å—Å–∏–π - —ç—Ç–æ –æ–≥–æ–Ω—å!"
            logger.info(f"üöÄ {BOT2_NAME} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ï–î–ò–ù–°–¢–í–ï–ù–ù–û–ï –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            await self.client2.send_message(chat, leonardo_message)
            logger.info(f"‚úÖ {BOT2_NAME} –æ—Ç–ø—Ä–∞–≤–∏–ª –û–î–ù–û –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–∏–∞–ª–æ–≥–∞ –±–æ—Ç–æ–≤: {e}")
    
    async def handle_message(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            import time
            from datetime import datetime, timedelta
            
            message_text = event.message.text
            sender_id = event.sender_id
            chat_id = event.chat_id
            message_id = event.message.id
            
            # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–æ—Å—å
            if not hasattr(self, 'processed_messages'):
                self.processed_messages = set()
            
            message_key = f"{sender_id}:{message_id}:{message_text}"
            if message_key in self.processed_messages:
                logger.info(f"üîÑ –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {message_text[:30]}...")
                return
            
            self.processed_messages.add(message_key)
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
            if len(self.processed_messages) > 100:
                # –£–¥–∞–ª—è–µ–º –ø–æ–ª–æ–≤–∏–Ω—É —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                old_messages = list(self.processed_messages)[:50]
                for old_msg in old_messages:
                    self.processed_messages.discard(old_msg)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞
            if str(chat_id) != str(CHAT_ID):
                logger.info(f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞: {chat_id} != {CHAT_ID}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (Reply), —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º (@) –∏–ª–∏ –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            is_reply = event.message.reply_to is not None
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ @
            is_mention = ('@' in message_text and (
                BOT1_NAME in message_text or 
                BOT2_NAME in message_text or 
                BOT3_NAME in message_text or
                any(name in message_text.lower() for name in ['daniel', '–¥–∞–Ω–∏—ç–ª—å', '–¥–∞–Ω–∏–µ–ª—å']) or
                any(name in message_text.lower() for name in ['leonardo', '–ª–µ–æ–Ω–∞—Ä–¥–æ']) or
                any(name in message_text.lower() for name in ['–∞–ª–µ–≤—Ç–∏–Ω–∞', '–∞–ª–µ–≤—Ç–∏–Ω—É', 'alevtina'])
            ))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É "–ø–æ–≥–æ–≤–æ—Ä–∏ —Å [–±–æ—Ç]"
            talk_to_bot_pattern = r'–ø–æ–≥–æ–≤–æ—Ä–∏\s+—Å\s+(\w+)'
            import re
            talk_match = re.search(talk_to_bot_pattern, message_text.lower())
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if talk_match:
                logger.info(f"üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '–ø–æ–≥–æ–≤–æ—Ä–∏ —Å [–±–æ—Ç]': {message_text}")
                logger.info(f"üéØ talk_match: {talk_match.group(1)}")
                logger.info(f"üéØ is_reply: {is_reply}, is_mention: {is_mention}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É "–ø–æ–≥–æ–≤–æ—Ä–∏ —Å [–±–æ—Ç]" –∏–ª–∏ Reply/—É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º
            if talk_match or is_reply or is_mention:
                logger.info(f"üë§ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")
                logger.info(f"üîç ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {sender_id}")
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ –≤ –æ–±—ã—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–æ—Ç—É: {message_text}")
                if any(name in message_text for name in [BOT1_NAME, "Daniel", "–î–∞–Ω–∏—ç–ª—å", "–î–∞–Ω–∏–µ–ª—å", "Leonardo", "–õ–µ–æ–Ω–∞—Ä–¥–æ", "–ê–ª–µ–≤—Ç–∏–Ω–∞"]) or any(name in message_text.lower() for name in ['daniel', '–¥–∞–Ω–∏—ç–ª—å', '–¥–∞–Ω–∏–µ–ª—å', 'leonardo', '–ª–µ–æ–Ω–∞—Ä–¥–æ', '–∞–ª–µ–≤—Ç–∏–Ω–∞', '–∞–ª–µ–≤—Ç–∏–Ω—É', 'alevtina']):
                    logger.info(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–æ—Ç—É –≤ –æ–±—ã—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                else:
                    logger.info(f"üö´ –ù–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–æ—Ç—É, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º ID –±–æ—Ç–æ–≤
                me1 = await self.client1.get_me()
                me2 = await self.client2.get_me()
                me3 = await self.client3.get_me()
                logger.info(f"üîç ID –±–æ—Ç–æ–≤: {me1.id}, {me2.id}, {me3.id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞
                if not self.conversation_active:
                    logger.info(f"üìù –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è Reply)
                if is_reply:
                    try:
                        replied_message = await event.get_reply_message()
                        if not replied_message:
                            logger.info(f"üö´ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
                            return
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: replied_message.sender_id={replied_message.sender_id}, sender_id={sender_id}")
                        if replied_message.sender_id != sender_id:
                            logger.info(f"‚úÖ –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
                        else:
                            logger.info(f"üö´ –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
                            return
                    except Exception as e:
                        logger.info(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {e}")
                        return
                else:
                    # –î–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω—É–∂–µ–Ω replied_message
                    replied_message = None
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å
                if talk_match:
                    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ "–ø–æ–≥–æ–≤–æ—Ä–∏ —Å [–±–æ—Ç]" - –ü–†–ò–û–†–ò–¢–ï–¢ –ù–ê–î –í–°–ï–ú
                    target_bot = talk_match.group(1).lower()
                    logger.info(f"üéØ –ö–æ–º–∞–Ω–¥–∞ '–ø–æ–≥–æ–≤–æ—Ä–∏ —Å {target_bot}' - –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê")
                    
                    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ Reply –∫ –±–æ—Ç—É, —Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –¢–û–¢ –ñ–ï –±–æ—Ç
                    if is_reply and is_user_message:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫ –∫–∞–∫–æ–º—É –±–æ—Ç—É –±—ã–ª Reply - –≠–¢–û –ë–£–î–ï–¢ –û–¢–í–ï–ß–ê–¢–¨
                        if replied_message.sender_id == me1.id:
                            bot_name = BOT1_NAME  # Daniel –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å
                            logger.info(f"üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É Reply –∫ Daniel")
                        elif replied_message.sender_id == me2.id:
                            bot_name = BOT2_NAME  # Leonardo –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å
                            logger.info(f"üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É Reply –∫ Leonardo")
                        elif replied_message.sender_id == me3.id:
                            bot_name = BOT3_NAME  # –ê–ª–µ–≤—Ç–∏–Ω–∞ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å
                            logger.info(f"üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É Reply –∫ –ê–ª–µ–≤—Ç–∏–Ω–µ")
                        else:
                            logger.info(f"üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Ç –¥–ª—è Reply")
                            return
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Å–∞–º–∏–º —Å–æ–±–æ–π
                        if bot_name == BOT1_NAME and target_bot in ['daniel', '–¥–∞–Ω–∏—ç–ª—å', '–¥–∞–Ω–∏–ª', '–¥–∞–Ω–∏–µ–ª—å']:
                            logger.info(f"üö´ Daniel –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Å–∞–º–∏–º —Å–æ–±–æ–π, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
                            return
                        elif bot_name == BOT2_NAME and target_bot in ['leonardo', '–ª–µ–æ–Ω–∞—Ä–¥–æ']:
                            logger.info(f"üö´ Leonardo –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Å–∞–º–∏–º —Å–æ–±–æ–π, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
                            return
                        elif bot_name == BOT3_NAME and target_bot in ['–∞–ª–µ–≤—Ç–∏–Ω–∞', '–∞–ª–µ–≤—Ç–∏–Ω—É', 'alevtina']:
                            logger.info(f"üö´ –ê–ª–µ–≤—Ç–∏–Ω–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Å–∞–º–æ–π —Å–æ–±–æ–π, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
                            return
                        
                        logger.info(f"‚úÖ {bot_name} –±—É–¥–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ {target_bot}")
                    else:
                        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –±–æ—Ç–∞ –∫ –±–æ—Ç—É
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥—ã
                        if sender_id == me1.id:
                            sender_bot = BOT1_NAME
                        elif sender_id == me2.id:
                            sender_bot = BOT2_NAME
                        elif sender_id == me3.id:
                            sender_bot = BOT3_NAME
                        else:
                            sender_bot = "user"
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –Ω–µ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Å–∞–º–æ–º—É —Å–µ–±–µ
                        if sender_bot != "user" and (
                            (sender_bot == BOT1_NAME and target_bot in ['daniel', '–¥–∞–Ω–∏—ç–ª—å', '–¥–∞–Ω–∏–ª', '–¥–∞–Ω–∏–µ–ª—å']) or
                            (sender_bot == BOT2_NAME and target_bot in ['leonardo', '–ª–µ–æ–Ω–∞—Ä–¥–æ']) or
                            (sender_bot == BOT3_NAME and target_bot in ['–∞–ª–µ–≤—Ç–∏–Ω–∞', '–∞–ª–µ–≤—Ç–∏–Ω—É', 'alevtina'])
                        ):
                            logger.info(f"üö´ –ë–æ—Ç {sender_bot} –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Å–∞–º–∏–º —Å–æ–±–æ–π, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
                            return
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –±–æ—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ
                        if target_bot in ['daniel', '–¥–∞–Ω–∏—ç–ª—å', '–¥–∞–Ω–∏–ª', 'daniel', '–¥–∞–Ω–∏–µ–ª—å']:
                            bot_name = BOT1_NAME
                            logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å Daniel")
                        elif target_bot in ['leonardo', '–ª–µ–æ–Ω–∞—Ä–¥–æ', 'leonardo']:
                            bot_name = BOT2_NAME
                            logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å Leonardo")
                        elif target_bot in ['–∞–ª–µ–≤—Ç–∏–Ω–∞', '–∞–ª–µ–≤—Ç–∏–Ω—É', 'alevtina', '–∞–ª–µ–≤—Ç–∏–Ω–∞']:
                            bot_name = BOT3_NAME
                            logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ê–ª–µ–≤—Ç–∏–Ω–æ–π")
                        else:
                            logger.info(f"üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Ç –≤ –∫–æ–º–∞–Ω–¥–µ: {target_bot}")
                            return
                        
                elif is_reply:
                    # –ï—Å–ª–∏ —ç—Ç–æ Reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –æ—Ç–≤–µ—á–∞–µ—Ç –¢–û–¢ –ñ–ï –±–æ—Ç
                    if replied_message.sender_id == me1.id:  # –ï—Å–ª–∏ Reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ Daniel
                        bot_name = BOT1_NAME  # –û—Ç–≤–µ—á–∞–µ—Ç Daniel
                        logger.info(f"‚úÖ Reply –Ω–∞ Daniel ‚Üí –æ—Ç–≤–µ—á–∞–µ—Ç Daniel")
                    elif replied_message.sender_id == me2.id:  # –ï—Å–ª–∏ Reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ Leonardo
                        bot_name = BOT2_NAME  # –û—Ç–≤–µ—á–∞–µ—Ç Leonardo
                        logger.info(f"‚úÖ Reply –Ω–∞ Leonardo ‚Üí –æ—Ç–≤–µ—á–∞–µ—Ç Leonardo")
                    elif replied_message.sender_id == me3.id:  # –ï—Å–ª–∏ Reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ê–ª–µ–≤—Ç–∏–Ω—ã
                        bot_name = BOT3_NAME  # –û—Ç–≤–µ—á–∞–µ—Ç –ê–ª–µ–≤—Ç–∏–Ω–∞
                        logger.info(f"‚úÖ Reply –Ω–∞ –ê–ª–µ–≤—Ç–∏–Ω—É ‚Üí –æ—Ç–≤–µ—á–∞–µ—Ç –ê–ª–µ–≤—Ç–∏–Ω–∞")
                    else:
                        # –ï—Å–ª–∏ Reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º
                        if any(name in message_text for name in ["Daniel", "–î–∞–Ω–∏—ç–ª—å", "–î–∞–Ω–∏–µ–ª—å", "–≤–æ–¥–∏—Ç–µ–ª—å"]):
                            bot_name = BOT1_NAME
                            logger.info(f"‚úÖ Reply –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º Daniel")
                        elif any(name in message_text for name in ["Leonardo", "–õ–µ–æ–Ω–∞—Ä–¥–æ", "–ø–∞—Å—Å–∞–∂–∏—Ä"]):
                            bot_name = BOT2_NAME
                            logger.info(f"‚úÖ Reply –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º Leonardo")
                        elif any(name in message_text for name in ["–ê–ª–µ–≤—Ç–∏–Ω–∞", "–∞–ª–µ–≤—Ç–∏–Ω–∞", "–∫—Ä–∏—Ç–∏–∫"]):
                            bot_name = BOT3_NAME
                            logger.info(f"‚úÖ Reply –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ê–ª–µ–≤—Ç–∏–Ω—ã")
                        else:
                            logger.info(f"üö´ Reply –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                            return
                elif is_mention:
                    # –ï—Å–ª–∏ —ç—Ç–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∏–º–µ–Ω–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                    if any(name in message_text for name in [BOT1_NAME, "Daniel", "–î–∞–Ω–∏—ç–ª—å", "–î–∞–Ω–∏–µ–ª—å"]) or any(name in message_text.lower() for name in ['daniel', '–¥–∞–Ω–∏—ç–ª—å', '–¥–∞–Ω–∏–µ–ª—å']):
                        bot_name = BOT1_NAME
                        logger.info(f"‚úÖ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ Daniel")
                    elif any(name in message_text for name in [BOT2_NAME, "Leonardo", "–õ–µ–æ–Ω–∞—Ä–¥–æ"]) or any(name in message_text.lower() for name in ['leonardo', '–ª–µ–æ–Ω–∞—Ä–¥–æ']):
                        bot_name = BOT2_NAME
                        logger.info(f"‚úÖ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ Leonardo")
                    elif any(name in message_text for name in [BOT3_NAME, "–ê–ª–µ–≤—Ç–∏–Ω–∞"]) or any(name in message_text.lower() for name in ['–∞–ª–µ–≤—Ç–∏–Ω–∞', '–∞–ª–µ–≤—Ç–∏–Ω—É', 'alevtina']):
                        bot_name = BOT3_NAME
                        logger.info(f"‚úÖ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ê–ª–µ–≤—Ç–∏–Ω—ã")
                    else:
                        logger.info(f"üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
                        return
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏
                    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: '{message_text}'")
                    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ Daniel: {any(name in message_text for name in [BOT1_NAME, 'Daniel', '–î–∞–Ω–∏—ç–ª—å', '–î–∞–Ω–∏–µ–ª—å'])}")
                    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ Leonardo: {any(name in message_text for name in [BOT2_NAME, 'Leonardo', '–õ–µ–æ–Ω–∞—Ä–¥–æ'])}")
                    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ê–ª–µ–≤—Ç–∏–Ω—É: {any(name in message_text for name in [BOT3_NAME, '–ê–ª–µ–≤—Ç–∏–Ω–∞'])}")
                    
                    if any(name in message_text for name in [BOT1_NAME, "Daniel", "–î–∞–Ω–∏—ç–ª—å", "–î–∞–Ω–∏–µ–ª—å"]) or any(name in message_text.lower() for name in ['daniel', '–¥–∞–Ω–∏—ç–ª—å', '–¥–∞–Ω–∏–µ–ª—å']):
                        bot_name = BOT1_NAME
                        logger.info(f"‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ Daniel –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
                    elif any(name in message_text for name in [BOT2_NAME, "Leonardo", "–õ–µ–æ–Ω–∞—Ä–¥–æ"]) or any(name in message_text.lower() for name in ['leonardo', '–ª–µ–æ–Ω–∞—Ä–¥–æ']):
                        bot_name = BOT2_NAME
                        logger.info(f"‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ Leonardo –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
                    elif any(name in message_text for name in [BOT3_NAME, "–ê–ª–µ–≤—Ç–∏–Ω–∞"]) or any(name in message_text.lower() for name in ['–∞–ª–µ–≤—Ç–∏–Ω–∞', '–∞–ª–µ–≤—Ç–∏–Ω—É', 'alevtina']):
                        bot_name = BOT3_NAME
                        logger.info(f"‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ê–ª–µ–≤—Ç–∏–Ω–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
                    else:
                        logger.info(f"üö´ –ù–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–æ—Ç—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
                        return
                        
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç—ã –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if replied_message and replied_message.text:
                    system_messages = [
                            "üîÑ –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞!",
                            "üéâ –°–∏—Å—Ç–µ–º–∞ —é–∑–µ—Ä-–±–æ—Ç–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –ë–æ—Ç—ã –±—É–¥—É—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é 'Reply' (–æ—Ç–≤–µ—Ç–∏—Ç—å) –≤ Telegram –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                            "‚èπÔ∏è –†–∞–∑–≥–æ–≤–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
                        ]
                        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –±–æ—Ç—ã –º–æ–≥–ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥—É
                        # if replied_message.text in system_messages:
                        #     logger.info(f"üö´ –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
                        #     return
                        
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                is_user_message = sender_id not in [me1.id, me2.id, me3.id]
                is_user_reply = is_user_message and is_reply
                logger.info(f"üîç is_user_message: {is_user_message}, is_user_reply: {is_user_reply}")
                
                # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if is_user_message and self.processing_user_messages:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    user_queue_item = {
                        'event': event,
                        'message_text': message_text,
                        'bot_name': bot_name,
                        'sender_id': sender_id,
                        'is_reply': is_reply,
                        'is_mention': is_mention,
                        'replied_message': replied_message if is_reply else None,
                        'timestamp': datetime.now()
                    }
                    self.user_message_queue.append(user_queue_item)
                    logger.info(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–Ω—è—Ç–∞. –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {len(self.user_message_queue)}")
                    return
                
                # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –∏ —Ü–µ–ª–µ–≤–æ–π –±–æ—Ç –∑–∞–Ω—è—Ç
                if not is_user_message and self.is_responding.get(bot_name, False):
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å
                    queue_item = {
                        'event': event,
                        'message_text': message_text,
                        'bot_name': bot_name,
                        'sender_id': sender_id,
                        'timestamp': datetime.now()
                    }
                    self.message_queue[bot_name].append(queue_item)
                    logger.info(f"üìã {bot_name} –∑–∞–Ω—è—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å. –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {len(self.message_queue[bot_name])}")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞ (–º–∏–Ω–∏–º—É–º 15 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏)
                # –ù–û: –µ—Å–ª–∏ —ç—Ç–æ Reply –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –æ—Ç –±–æ—Ç–∞), —Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –≤–Ω–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                current_time = datetime.now()
                
                # –ï—Å–ª–∏ —ç—Ç–æ Reply –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏
                if is_user_reply:
                    logger.info(f"‚úÖ Reply –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏")
                elif bot_name in self.response_times:
                    time_diff = current_time - self.response_times[bot_name]
                    if time_diff < timedelta(seconds=15):
                        logger.info(f"‚è∞ {bot_name} –æ—Ç–≤–µ—á–∞–ª –º–µ–Ω–µ–µ 15 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        return
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ—Ç–≤–µ—Ç–∞
                self.is_responding[bot_name] = True
                if is_user_message:
                    self.processing_user_messages = True
                    logger.info(f"üë• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ processing_user_messages: True")
                logger.info(f"üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ is_responding –¥–ª—è {bot_name}: True")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                if not is_user_message:
                    # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –∫ –±–æ—Ç—É
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∞–≤—Ç–æ–±–µ—Å–µ–¥—ã
                    if not await self.can_bot_respond_to_bot(bot_name):
                        logger.info(f"üö´ –ü—Ä–µ–≤—ã—à–µ–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –±–µ—Å–µ–¥—ã –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏ –¥–ª—è {bot_name}")
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
                        self.is_responding[bot_name] = False
                        return
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±–æ—Ç-–±–æ—Ç –æ–±—â–µ–Ω–∏—è
                    logger.info(f"‚è∞ {bot_name} –∂–¥–µ—Ç 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º –±–æ—Ç—É...")
                    await asyncio.sleep(30)
                    
                    # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç-–±–æ—Ç
                    await self.track_bot_to_bot_message(bot_name)
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                    logger.info(f"‚è∞ {bot_name} –∂–¥–µ—Ç 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...")
                    await asyncio.sleep(15)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
                self.conversation_history.append({
                    'sender': 'user',
                    'message': message_text,
                    'timestamp': current_time
                })
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
                recent_history = self.conversation_history[-5:] if len(self.conversation_history) > 5 else self.conversation_history
                history_text = "\n".join([f"{msg['sender']}: {msg['message']}" for msg in recent_history])
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
                if talk_match:
                    interaction_type = "bot_to_bot_command"
                    context = f"""–°–æ–æ–±—â–µ–Ω–∏–µ: {message_text}
–û—Ç–≤–µ—á–∞–µ—Ç: {bot_name}
–¢–∏–ø: –ö–æ–º–∞–Ω–¥–∞ –æ—Ç –±–æ—Ç–∞ –∫ –±–æ—Ç—É

–ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê (–ù–ï –ü–û–í–¢–û–†–Ø–ô –≠–¢–ò –¢–ï–ú–´ –ò –§–†–ê–ó–´):
{history_text}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –≠—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞ –∫ –¥—Ä—É–≥–æ–º—É –±–æ—Ç—É
- –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –±—É–¥—Ç–æ —Ç–µ–±—è –ø–æ–ø—Ä–æ—Å–∏–ª–∏ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –±–æ—Ç–æ–º
- –ë—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
- –ò–ó–ë–ï–ì–ê–ô —Å–ª–æ–≤: "–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–∫–∞—á–µ—Å—Ç–≤–∞", "must-have"
- –ü–µ—Ä–µ–∫–ª—é—á–∏—Å—å –Ω–∞ –ù–û–í–£–Æ —Ç–µ–º—É: –ª–∏—á–Ω–∞—è –∂–∏–∑–Ω—å, —É–≤–ª–µ—á–µ–Ω–∏—è, –ø–ª–∞–Ω—ã, –∏—Å—Ç–æ—Ä–∏–∏, —Ä–∞–±–æ—Ç–∞
- –ë—É–¥—å –ñ–ò–í–´–ú –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, –∞ –Ω–µ —à–∞–±–ª–æ–Ω–Ω—ã–º
- –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –£–ù–ò–ö–ê–õ–¨–ù–´–ú"""
                else:
                    interaction_type = "normal"
                    context = f"""–°–æ–æ–±—â–µ–Ω–∏–µ: {message_text}
–û—Ç–≤–µ—á–∞–µ—Ç: {bot_name}

–ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê (–ù–ï –ü–û–í–¢–û–†–Ø–ô –≠–¢–ò –¢–ï–ú–´ –ò –§–†–ê–ó–´):
{history_text}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
- –ò–ó–ë–ï–ì–ê–ô —Å–ª–æ–≤: "–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–∫–∞—á–µ—Å—Ç–≤–∞", "must-have"
- –ü–µ—Ä–µ–∫–ª—é—á–∏—Å—å –Ω–∞ –ù–û–í–£–Æ —Ç–µ–º—É: –ª–∏—á–Ω–∞—è –∂–∏–∑–Ω—å, —É–≤–ª–µ—á–µ–Ω–∏—è, –ø–ª–∞–Ω—ã, –∏—Å—Ç–æ—Ä–∏–∏, —Ä–∞–±–æ—Ç–∞
- –ë—É–¥—å –ñ–ò–í–´–ú –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, –∞ –Ω–µ —à–∞–±–ª–æ–Ω–Ω—ã–º
- –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –£–ù–ò–ö–ê–õ–¨–ù–´–ú"""
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞
                logger.info(f"üî¢ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –±–æ—Ç–∞: '{bot_name}' (–±—ã–ª–æ: {self.message_counters.get(bot_name, 0)})")
                counter = self._safe_increment_counter(bot_name)
                logger.info(f"üî¢ –ù–æ–≤—ã–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –±–æ—Ç–∞: '{bot_name}' = {counter}")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                logger.info(f"ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –±–æ—Ç–∞: '{bot_name}' (—Ç–∏–ø: {type(bot_name)})")
                response = await self.ai_handler.generate_response(message_text, bot_name, context, counter)
                logger.info(f"‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {response[:50]}...")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.conversation_history.append({
                    'sender': bot_name,
                    'message': response,
                    'timestamp': current_time
                })
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
                self.response_times[bot_name] = current_time
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –û–î–ò–ù –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ï–î–ò–ù–°–¢–í–ï–ù–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {bot_name}: {response[:50]}...")
                logger.info(f"üîç –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º: bot_name='{bot_name}', BOT1_NAME='{BOT1_NAME}', BOT2_NAME='{BOT2_NAME}', BOT3_NAME='{BOT3_NAME}'")
                if bot_name == BOT1_NAME:  # Daniel
                    await self.client1.send_message(event.chat_id, response, reply_to=event.message.id)
                    logger.info(f"‚úÖ {BOT1_NAME} –æ—Ç–ø—Ä–∞–≤–∏–ª –û–î–ò–ù –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ client1")
                elif bot_name == BOT2_NAME:  # Leonardo
                    await self.client2.send_message(event.chat_id, response, reply_to=event.message.id)
                    logger.info(f"‚úÖ {BOT2_NAME} –æ—Ç–ø—Ä–∞–≤–∏–ª –û–î–ò–ù –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ client2")
                elif bot_name == BOT3_NAME:  # –ê–ª–µ–≤—Ç–∏–Ω–∞
                    await self.client3.send_message(event.chat_id, response, reply_to=event.message.id)
                    logger.info(f"‚úÖ {BOT3_NAME} –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ –û–î–ò–ù –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ client3")
                else:
                    logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Ç: '{bot_name}'. –î–æ—Å—Ç—É–ø–Ω—ã–µ: '{BOT1_NAME}', '{BOT2_NAME}', '{BOT3_NAME}'")
                    raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Ç: {bot_name}")
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
                self.is_responding[bot_name] = False
                logger.info(f"‚úÖ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ is_responding –¥–ª—è {bot_name}: False")
                
                if is_user_message:
                    self.processing_user_messages = False
                    logger.info(f"üë• –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ processing_user_messages: False")
                
                logger.info(f"üí¨ {bot_name} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                
                # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                if is_user_message:
                    await self.process_user_message_queue()
                
                # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
                await self.process_message_queue(bot_name)
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ Reply –∏ –Ω–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º): {message_text}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try:
                if 'bot_name' in locals() and bot_name:
                    self.is_responding[bot_name] = False
                    logger.info(f"üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ {bot_name} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: False")
                else:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏
                    for name in [BOT1_NAME, BOT2_NAME, BOT3_NAME]:
                        self.is_responding[name] = False
                    logger.info(f"üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if 'is_user_message' in locals() and locals().get('is_user_message', False):
                    self.processing_user_messages = False
                    logger.info(f"üë• –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ processing_user_messages –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: False")
            except Exception as cleanup_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–ª–∞–≥–æ–≤: {cleanup_error}")
    
    async def process_message_queue(self, bot_name):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
        try:
            if not self.message_queue[bot_name]:
                return
            
            logger.info(f"üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è {bot_name}. –°–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏: {len(self.message_queue[bot_name])}")
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            queue_item = self.message_queue[bot_name].pop(0)
            
            logger.info(f"üì§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è {bot_name}: {queue_item['message_text']}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            await self.handle_queued_message(queue_item)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è {bot_name}: {e}")
    
    async def handle_queued_message(self, queue_item):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            event = queue_item['event']
            message_text = queue_item['message_text']
            bot_name = queue_item['bot_name']
            sender_id = queue_item['sender_id']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ—Ç —Ç–µ–ø–µ—Ä—å —Å–≤–æ–±–æ–¥–µ–Ω
            if self.is_responding.get(bot_name, False):
                # –ï—Å–ª–∏ –±–æ—Ç –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ –æ—á–µ—Ä–µ–¥–∏
                self.message_queue[bot_name].insert(0, queue_item)
                logger.info(f"üìã {bot_name} –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å")
                return
            
            logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {message_text}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —á—Ç–æ –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç
            self.is_responding[bot_name] = True
            logger.info(f"üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ is_responding –¥–ª—è {bot_name}: True (–∏–∑ –æ—á–µ—Ä–µ–¥–∏)")
            
            # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ (—Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞)
            logger.info(f"‚è∞ {bot_name} –∂–¥–µ—Ç 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏...")
            await asyncio.sleep(30)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–µ)
            from datetime import datetime
            current_time = datetime.now()
            
            self.conversation_history.append({
                'sender': 'user',
                'message': message_text,
                'timestamp': current_time
            })
            
            recent_history = self.conversation_history[-5:] if len(self.conversation_history) > 5 else self.conversation_history
            history_text = "\n".join([f"{msg['sender']}: {msg['message']}" for msg in recent_history])
            
            context = f"""–°–æ–æ–±—â–µ–Ω–∏–µ: {message_text}
–û—Ç–≤–µ—á–∞–µ—Ç: {bot_name}

–ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê (–ù–ï –ü–û–í–¢–û–†–Ø–ô –≠–¢–ò –¢–ï–ú–´ –ò –§–†–ê–ó–´):
{history_text}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
- –ò–ó–ë–ï–ì–ê–ô —Å–ª–æ–≤: "–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–∫–∞—á–µ—Å—Ç–≤–∞", "must-have"
- –ü–µ—Ä–µ–∫–ª—é—á–∏—Å—å –Ω–∞ –ù–û–í–£–Æ —Ç–µ–º—É: –ª–∏—á–Ω–∞—è –∂–∏–∑–Ω—å, —É–≤–ª–µ—á–µ–Ω–∏—è, –ø–ª–∞–Ω—ã, –∏—Å—Ç–æ—Ä–∏–∏, —Ä–∞–±–æ—Ç–∞
- –ë—É–¥—å –ñ–ò–í–´–ú –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, –∞ –Ω–µ —à–∞–±–ª–æ–Ω–Ω—ã–º
- –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –£–ù–ò–ö–ê–õ–¨–ù–´–ú"""
            
            counter = self._safe_increment_counter(bot_name)
            response = await self.ai_handler.generate_response(message_text, bot_name, context, counter)
            
            self.conversation_history.append({
                'sender': bot_name,
                'message': response,
                'timestamp': current_time
            })
            
            self.response_times[bot_name] = current_time
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –û–î–ò–ù –æ—Ç–≤–µ—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –±–æ—Ç–æ–≤
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ï–î–ò–ù–°–¢–í–ï–ù–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ—Ç {bot_name}: {response[:50]}...")
            if bot_name == BOT1_NAME:  # Daniel
                await self.client1.send_message(event.chat_id, response, reply_to=event.message.id)
                logger.info(f"‚úÖ {BOT1_NAME} –æ—Ç–ø—Ä–∞–≤–∏–ª –û–î–ò–ù –æ—Ç–≤–µ—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —á–µ—Ä–µ–∑ client1")
            elif bot_name == BOT2_NAME:  # Leonardo
                await self.client2.send_message(event.chat_id, response, reply_to=event.message.id)
                logger.info(f"‚úÖ {BOT2_NAME} –æ—Ç–ø—Ä–∞–≤–∏–ª –û–î–ò–ù –æ—Ç–≤–µ—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —á–µ—Ä–µ–∑ client2")
            elif bot_name == BOT3_NAME:  # –ê–ª–µ–≤—Ç–∏–Ω–∞
                await self.client3.send_message(event.chat_id, response, reply_to=event.message.id)
                logger.info(f"‚úÖ {BOT3_NAME} –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ –û–î–ò–ù –æ—Ç–≤–µ—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —á–µ—Ä–µ–∑ client3")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
            self.is_responding[bot_name] = False
            logger.info(f"‚úÖ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ is_responding –¥–ª—è {bot_name}: False (–∏–∑ –æ—á–µ—Ä–µ–¥–∏)")
            
            logger.info(f"üí¨ {bot_name} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏")
            
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏
            await self.process_message_queue(bot_name)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {e}")
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if 'bot_name' in locals():
                self.is_responding[bot_name] = False
                logger.info(f"üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ {bot_name} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏: False")
    
    async def process_user_message_queue(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ –±–æ—Ç–∞–º–∏)"""
        try:
            if not self.user_message_queue:
                return
            
            logger.info(f"üë• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –°–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏: {len(self.user_message_queue)}")
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_queue_item = self.user_message_queue.pop(0)
            
            logger.info(f"üì§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {user_queue_item['message_text']}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            await self.handle_user_queued_message(user_queue_item)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    async def handle_user_queued_message(self, user_queue_item):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            event = user_queue_item['event']
            message_text = user_queue_item['message_text']
            bot_name = user_queue_item['bot_name']
            sender_id = user_queue_item['sender_id']
            is_reply = user_queue_item['is_reply']
            is_mention = user_queue_item['is_mention']
            replied_message = user_queue_item['replied_message']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–ª–µ–≤–æ–π –±–æ—Ç —Ç–µ–ø–µ—Ä—å —Å–≤–æ–±–æ–¥–µ–Ω
            if self.is_responding.get(bot_name, False):
                # –ï—Å–ª–∏ –±–æ—Ç –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ –æ—á–µ—Ä–µ–¥–∏
                self.user_message_queue.insert(0, user_queue_item)
                logger.info(f"üë• {bot_name} –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å")
                return
            
            logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {message_text}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏
            self.is_responding[bot_name] = True
            self.processing_user_messages = True
            logger.info(f"üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è {bot_name} (–∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π): True")
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–≤–µ—á–∞–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 15 —Å–µ–∫—É–Ω–¥
            logger.info(f"‚è∞ {bot_name} –∂–¥–µ—Ç 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ –æ—á–µ—Ä–µ–¥–∏...")
            await asyncio.sleep(15)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            from datetime import datetime
            current_time = datetime.now()
            
            self.conversation_history.append({
                'sender': 'user',
                'message': message_text,
                'timestamp': current_time
            })
            
            recent_history = self.conversation_history[-5:] if len(self.conversation_history) > 5 else self.conversation_history
            history_text = "\n".join([f"{msg['sender']}: {msg['message']}" for msg in recent_history])
            
            context = f"""–°–æ–æ–±—â–µ–Ω–∏–µ: {message_text}
–û—Ç–≤–µ—á–∞–µ—Ç: {bot_name}

–ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê (–ù–ï –ü–û–í–¢–û–†–Ø–ô –≠–¢–ò –¢–ï–ú–´ –ò –§–†–ê–ó–´):
{history_text}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
- –ò–ó–ë–ï–ì–ê–ô —Å–ª–æ–≤: "–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–∫–∞—á–µ—Å—Ç–≤–∞", "must-have"
- –ü–µ—Ä–µ–∫–ª—é—á–∏—Å—å –Ω–∞ –ù–û–í–£–Æ —Ç–µ–º—É: –ª–∏—á–Ω–∞—è –∂–∏–∑–Ω—å, —É–≤–ª–µ—á–µ–Ω–∏—è, –ø–ª–∞–Ω—ã, –∏—Å—Ç–æ—Ä–∏–∏, —Ä–∞–±–æ—Ç–∞
- –ë—É–¥—å –ñ–ò–í–´–ú –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, –∞ –Ω–µ —à–∞–±–ª–æ–Ω–Ω—ã–º
- –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –£–ù–ò–ö–ê–õ–¨–ù–´–ú"""
            
            counter = self._safe_increment_counter(bot_name)
            response = await self.ai_handler.generate_response(message_text, bot_name, context, counter)
            
            self.conversation_history.append({
                'sender': bot_name,
                'message': response,
                'timestamp': current_time
            })
            
            self.response_times[bot_name] = current_time
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –û–î–ò–ù –æ—Ç–≤–µ—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            logger.info(f"üë• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ï–î–ò–ù–°–¢–í–ï–ù–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç {bot_name}: {response[:50]}...")
            if bot_name == BOT1_NAME:  # Daniel
                await self.client1.send_message(event.chat_id, response, reply_to=event.message.id)
                logger.info(f"‚úÖ {BOT1_NAME} –æ—Ç–ø—Ä–∞–≤–∏–ª –û–î–ò–ù –æ—Ç–≤–µ—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ client1")
            elif bot_name == BOT2_NAME:  # Leonardo
                await self.client2.send_message(event.chat_id, response, reply_to=event.message.id)
                logger.info(f"‚úÖ {BOT2_NAME} –æ—Ç–ø—Ä–∞–≤–∏–ª –û–î–ò–ù –æ—Ç–≤–µ—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ client2")
            elif bot_name == BOT3_NAME:  # –ê–ª–µ–≤—Ç–∏–Ω–∞
                await self.client3.send_message(event.chat_id, response, reply_to=event.message.id)
                logger.info(f"‚úÖ {BOT3_NAME} –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ –û–î–ò–ù –æ—Ç–≤–µ—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ client3")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
            self.is_responding[bot_name] = False
            self.processing_user_messages = False
            logger.info(f"‚úÖ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è {bot_name} (–∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π): False")
            
            logger.info(f"üí¨ {bot_name} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏")
            
            # –ù–ï –≤—ã–∑—ã–≤–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ - —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            # –û—á–µ—Ä–µ–¥—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {e}")
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if 'bot_name' in locals():
                self.is_responding[bot_name] = False
                self.processing_user_messages = False
                logger.info(f"üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ {bot_name} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: False")
    
    async def setup_userbot1(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–≤–æ–≥–æ —é–∑–µ—Ä-–±–æ—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω
            if not BOT1_TOKEN or BOT1_TOKEN == 'your_phone1_here':
                raise ValueError("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —é–∑–µ—Ä-–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª shlyapa1.env")
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
            await self.client1.start(phone=BOT1_TOKEN)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            @self.client1.on(events.NewMessage(pattern='/start'))
            async def start_handler(event):
                await self.start_conversation(event)
            
            @self.client1.on(events.NewMessage(pattern='/stop'))
            async def stop_handler(event):
                await self.stop_conversation(event)
            
            @self.client1.on(events.NewMessage())
            async def message_handler(event):
                try:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    await self.handle_message(event)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π client1: {e}")
                    logger.error(f"üîß –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É")
            
            logger.info(f"‚úÖ {BOT1_NAME} –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return self.client1
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {BOT1_NAME}: {e}")
            raise
    
    async def setup_userbot2(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Ç–æ—Ä–æ–≥–æ —é–∑–µ—Ä-–±–æ—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω
            if not BOT2_TOKEN or BOT2_TOKEN == 'your_phone2_here':
                raise ValueError("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —é–∑–µ—Ä-–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª shlyapa1.env")
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
            await self.client2.start(phone=BOT2_TOKEN)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            @self.client2.on(events.NewMessage(pattern='/start'))
            async def start_handler(event):
                await self.start_conversation(event)
            
            @self.client2.on(events.NewMessage(pattern='/stop'))
            async def stop_handler(event):
                await self.stop_conversation(event)
            
            @self.client2.on(events.NewMessage())
            async def message_handler(event):
                try:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    await self.handle_message(event)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π client2: {e}")
                    logger.error(f"üîß –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É")
            
            logger.info(f"‚úÖ {BOT2_NAME} –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return self.client2
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {BOT2_NAME}: {e}")
            raise
    
    async def setup_userbot3(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ —é–∑–µ—Ä-–±–æ—Ç–∞ (–ê–ª–µ–≤—Ç–∏–Ω–∞)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω
            if not BOT3_TOKEN or BOT3_TOKEN == 'your_phone3_here':
                raise ValueError("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ —é–∑–µ—Ä-–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª shlyapa1.env")
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
            await self.client3.start(phone=BOT3_TOKEN)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            @self.client3.on(events.NewMessage(pattern='/start'))
            async def start_handler(event):
                await self.start_conversation(event)
            
            @self.client3.on(events.NewMessage(pattern='/stop'))
            async def stop_handler(event):
                await self.stop_conversation(event)
            
            @self.client3.on(events.NewMessage())
            async def message_handler(event):
                try:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    await self.handle_message(event)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π client3: {e}")
                    logger.error(f"üîß –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É")
            
            logger.info(f"‚úÖ {BOT3_NAME} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            return self.client3
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {BOT3_NAME}: {e}")
            raise 
    
    async def can_bot_respond_to_bot(self, bot_name):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –¥—Ä—É–≥–æ–º—É –±–æ—Ç—É —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
        try:
            current_time = datetime.now()
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 15 –º–∏–Ω—É—Ç) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
            for bot in [BOT1_NAME, BOT2_NAME, BOT3_NAME]:
                if bot not in self.bot_to_bot_messages_15min:
                    self.bot_to_bot_messages_15min[bot] = []
                self.bot_to_bot_messages_15min[bot] = [
                    msg_time for msg_time in self.bot_to_bot_messages_15min[bot]
                    if current_time - msg_time < timedelta(minutes=15)
                ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞ (7 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ 15 –º–∏–Ω—É—Ç)
            if bot_name not in self.bot_to_bot_messages_15min:
                self.bot_to_bot_messages_15min[bot_name] = []
            
            bot_messages_count = len(self.bot_to_bot_messages_15min[bot_name])
            if bot_messages_count >= 7:
                logger.info(f"üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç 7 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞ {bot_name} –∑–∞ 15 –º–∏–Ω—É—Ç ({bot_messages_count}/7)")
                return False
            
            logger.info(f"‚úÖ –ë–æ—Ç {bot_name} –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å ({bot_messages_count}/7 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ 15 –º–∏–Ω—É—Ç)")
            
            # –ï—Å–ª–∏ –∏–¥–µ—Ç –∞–≤—Ç–æ–±–µ—Å–µ–¥–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –Ω–∞ –±–µ—Å–µ–¥—É (5-7 —Å–æ–æ–±—â–µ–Ω–∏–π)
            if self.auto_conversation_active:
                if self.auto_conversation_count >= 7:
                    logger.info(f"üö´ –ê–≤—Ç–æ–±–µ—Å–µ–¥–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ –º–∞–∫—Å–∏–º—É–º–∞ (7 —Å–æ–æ–±—â–µ–Ω–∏–π)")
                    await self.end_auto_conversation()
                    return False
                elif self.auto_conversation_count >= 5 and random.random() < 0.3:
                    # 30% —à–∞–Ω—Å –∑–∞–∫–æ–Ω—á–∏—Ç—å –±–µ—Å–µ–¥—É –ø–æ—Å–ª–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                    logger.info(f"üé≤ –ê–≤—Ç–æ–±–µ—Å–µ–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ –ø–æ—Å–ª–µ {self.auto_conversation_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
                    await self.end_auto_conversation()
                    return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±–æ—Ç-–±–æ—Ç: {e}")
            return False
    
    async def track_bot_to_bot_message(self, bot_name):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç-–±–æ—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            current_time = datetime.now()
            if bot_name not in self.bot_to_bot_messages_15min:
                self.bot_to_bot_messages_15min[bot_name] = []
            self.bot_to_bot_messages_15min[bot_name].append(current_time)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –∞–≤—Ç–æ–±–µ—Å–µ–¥–∞, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            if self.auto_conversation_active:
                self.auto_conversation_count += 1
                logger.info(f"üìä –ê–≤—Ç–æ–±–µ—Å–µ–¥–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ {self.auto_conversation_count}/7")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç-–±–æ—Ç: {e}")
    
    async def schedule_next_auto_conversation(self):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –±–µ—Å–µ–¥—É –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏"""
        try:
            current_time = datetime.now()
            
            # –†–∞–Ω–¥–æ–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç 5 –¥–æ 6 —á–∞—Å–æ–≤
            hours_delay = random.uniform(5.0, 6.0)
            self.next_auto_conversation_time = current_time + timedelta(hours=hours_delay)
            
            logger.info(f"üìÖ –°–ª–µ–¥—É—é—â–∞—è –∞–≤—Ç–æ–±–µ—Å–µ–¥–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {self.next_auto_conversation_time.strftime('%H:%M:%S')} (—á–µ—Ä–µ–∑ {hours_delay:.1f} —á–∞—Å–æ–≤)")
            
            # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.auto_conversation_task:
                self.auto_conversation_task.cancel()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
            delay_seconds = hours_delay * 3600
            self.auto_conversation_task = asyncio.create_task(self.auto_conversation_timer(delay_seconds))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–≤—Ç–æ–±–µ—Å–µ–¥—ã: {e}")
    
    async def auto_conversation_timer(self, delay_seconds):
        """–¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –±–µ—Å–µ–¥—ã"""
        try:
            await asyncio.sleep(delay_seconds)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
            if self.conversation_active and not self.processing_user_messages:
                await self.start_auto_conversation()
            else:
                logger.info(f"‚è∞ –í—Ä–µ–º—è –∞–≤—Ç–æ–±–µ—Å–µ–¥—ã, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–Ω—è—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
                # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ 30 –º–∏–Ω—É—Ç
                await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç
                if self.conversation_active and not self.processing_user_messages:
                    await self.start_auto_conversation()
                
        except asyncio.CancelledError:
            logger.info(f"‚è∞ –¢–∞–π–º–µ—Ä –∞–≤—Ç–æ–±–µ—Å–µ–¥—ã –æ—Ç–º–µ–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ –∞–≤—Ç–æ–±–µ—Å–µ–¥—ã: {e}")
    
    async def start_auto_conversation(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –±–µ—Å–µ–¥—É –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏"""
        try:
            if self.auto_conversation_active:
                logger.info(f"üö´ –ê–≤—Ç–æ–±–µ—Å–µ–¥–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞")
                return
            
            logger.info(f"ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –±–µ—Å–µ–¥—É –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏")
            
            self.auto_conversation_active = True
            self.auto_conversation_count = 0
            self.auto_conversation_start_time = datetime.now()
            self.last_auto_conversation_time = datetime.now()
            
            # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç
            try:
                chat = await self.client1.get_entity(CHAT_ID)
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç –¥–ª—è –∞–≤—Ç–æ–±–µ—Å–µ–¥—ã: {e}")
                return
            
            # –í—ã–±–∏—Ä–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é —Ç–µ–º—É –∏ –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ –±–æ—Ç–∞
            starter_message = get_unused_topic(self.used_conversation_topics)
            self.used_conversation_topics.append(starter_message)
            
            starter_bot = random.choice([BOT1_NAME, BOT2_NAME])
            
            logger.info(f"üéØ –í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞ –∞–≤—Ç–æ–±–µ—Å–µ–¥—ã: {starter_message[:50]}...")
            logger.info(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–µ–º: {len(self.used_conversation_topics)}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –û–î–ù–û —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–±–µ—Å–µ–¥—ã
            logger.info(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ï–î–ò–ù–°–¢–í–ï–ù–ù–û–ï —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–±–µ—Å–µ–¥—ã –æ—Ç {starter_bot}")
            if starter_bot == BOT1_NAME:
                await self.client1.send_message(chat, starter_message)
                logger.info(f"‚úÖ {BOT1_NAME} –æ—Ç–ø—Ä–∞–≤–∏–ª –û–î–ù–û —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–±–µ—Å–µ–¥—ã")
            else:
                await self.client2.send_message(chat, starter_message)
                logger.info(f"‚úÖ {BOT2_NAME} –æ—Ç–ø—Ä–∞–≤–∏–ª –û–î–ù–û —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–±–µ—Å–µ–¥—ã")
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.track_bot_to_bot_message(starter_bot)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∞–≤—Ç–æ–±–µ—Å–µ–¥—ã: {e}")
            self.auto_conversation_active = False
    
    async def end_auto_conversation(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –±–µ—Å–µ–¥—É"""
        try:
            if not self.auto_conversation_active:
                return
            
            duration = datetime.now() - self.auto_conversation_start_time
            logger.info(f"üèÅ –ê–≤—Ç–æ–±–µ—Å–µ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}, —Å–æ–æ–±—â–µ–Ω–∏–π: {self.auto_conversation_count}")
            
            self.auto_conversation_active = False
            self.auto_conversation_count = 0
            self.auto_conversation_start_time = None
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –±–µ—Å–µ–¥—É
            await self.schedule_next_auto_conversation()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–≤—Ç–æ–±–µ—Å–µ–¥—ã: {e}") 