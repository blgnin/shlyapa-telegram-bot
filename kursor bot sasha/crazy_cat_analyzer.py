"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π Crazy Cat –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ê–ª–µ–≤—Ç–∏–Ω—ã
"""
import json
import re
from typing import List, Dict

def find_crazy_cat_messages():
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Crazy Cat –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ —á–∞—Ç–∞"""
    print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è Crazy Cat...")
    
    try:
        with open('../ChatExport_2025-08-05/result.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        crazy_cat_messages = []
        all_users = set()
        
        for msg in data.get('messages', []):
            if msg.get('type') == 'message':
                from_name = str(msg.get('from', ''))
                from_id = str(msg.get('from_id', ''))
                text = msg.get('text', '')
                
                all_users.add(from_name)
                
                # –ò—â–µ–º –ø–æ —Ä–∞–∑–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –∏–º–µ–Ω–∏
                search_terms = ['crazy cat', 'crazycat', '–∞–ª–µ–≤—Ç–∏–Ω–∞', 'alevtina']
                
                if any(term in from_name.lower() for term in search_terms):
                    if isinstance(text, list):
                        text_str = ''.join([item if isinstance(item, str) else item.get('text', '') for item in text])
                    else:
                        text_str = str(text)
                    
                    if len(text_str.strip()) > 0 and len(text_str) < 300:
                        crazy_cat_messages.append({
                            'text': text_str.strip(),
                            'from_name': from_name,
                            'date': msg.get('date', ''),
                            'id': msg.get('id', 0)
                        })
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Crazy Cat: {len(crazy_cat_messages)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if crazy_cat_messages:
            print("\nüìù –ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π Crazy Cat:")
            for i, msg in enumerate(crazy_cat_messages[:15]):
                print(f"{i+1}. {msg['text']}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
        analyze_crazy_cat_style(crazy_cat_messages)
        
        return crazy_cat_messages
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        # –ü–æ–∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–º–µ–Ω–∞–º–∏
        try:
            print("\nüîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–º–µ–Ω–∞–º–∏...")
            similar_users = [user for user in all_users if any(term in user.lower() for term in ['cat', '–∞–ª–µ–≤', 'crazy'])]
            print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {similar_users}")
        except:
            pass
        return []

def analyze_crazy_cat_style(messages: List[Dict]):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è Crazy Cat"""
    if not messages:
        return
    
    print("\nüß† –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è Crazy Cat:")
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
    all_text = ' '.join([msg['text'].lower() for msg in messages])
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å
    aggressive_words = ['–±–ª—è—Ç—å', '—Å—É–∫–∞', '–¥—É—Ä–∞', '–∏–¥–∏–æ—Ç', '–ø—Ä–∏–¥—É—Ä–æ–∫', '—Ç—É–ø–æ–π', '–¥–µ–±–∏–ª', '–∫–æ–∑–µ–ª', '–º—É–¥–∞–∫']
    aggressive_count = sum(all_text.count(word) for word in aggressive_words)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–ø—Ä–∏–¥–∏—Ä—á–∏–≤–æ—Å—Ç—å)
    question_count = all_text.count('?')
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
    negative_words = ['–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω–æ', '–∫–æ—à–º–∞—Ä', '–∂–µ—Å—Ç—å', '–ø–∏–∑–¥–µ—Ü', '—Ç—Ä—ã–Ω–¥–µ—Ü']
    negative_count = sum(all_text.count(word) for word in negative_words)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Å—Ç–Ω–æ—Å—Ç—å/–ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å
    direct_words = ['—á–µ—Å—Ç–Ω–æ', '–ø—Ä–∞–≤–¥–∞', '—Å–µ—Ä—å–µ–∑–Ω–æ', '—Ä–µ–∞–ª—å–Ω–æ', '—Ñ–∞–∫—Ç']
    direct_count = sum(all_text.count(word) for word in direct_words)
    
    # –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–ª–æ–≤–∞
    words = re.findall(r'\b\w+\b', all_text)
    word_freq = {}
    for word in words:
        if len(word) > 3:  # –¢–æ–ª—å–∫–æ —Å–ª–æ–≤–∞ –¥–ª–∏–Ω–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤
            word_freq[word] = word_freq.get(word, 0) + 1
    
    top_words = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)[:10]
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  - –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
    print(f"  - –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞: {aggressive_count}")
    print(f"  - –í–æ–ø—Ä–æ—Å—ã: {question_count}")
    print(f"  - –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞: {negative_count}")
    print(f"  - –ü—Ä—è–º—ã–µ —Å–ª–æ–≤–∞: {direct_count}")
    print(f"  - –¢–æ–ø —Å–ª–æ–≤: {top_words[:5]}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    print(f"\nüí¨ –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã:")
    characteristic_phrases = []
    for msg in messages:
        text = msg['text']
        if any(word in text.lower() for word in aggressive_words + negative_words):
            characteristic_phrases.append(text)
        elif '?' in text and len(text) < 100:
            characteristic_phrases.append(text)
    
    for i, phrase in enumerate(characteristic_phrases[:10]):
        print(f"  {i+1}. {phrase}")

def create_alevtina_character(crazy_cat_messages: List[Dict]):
    """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ê–ª–µ–≤—Ç–∏–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ Crazy Cat"""
    
    print("\nüë§ –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ê–ª–µ–≤—Ç–∏–Ω—ã...")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    characteristic_phrases = []
    aggressive_phrases = []
    questioning_phrases = []
    
    for msg in crazy_cat_messages:
        text = msg['text']
        if len(text) < 150:  # –ö–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã
            if '?' in text:
                questioning_phrases.append(text)
            elif any(word in text.lower() for word in ['–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '—á—Ç–æ –∑–∞', '–∫–∞–∫ —Ç–∞–∫']):
                aggressive_phrases.append(text)
            else:
                characteristic_phrases.append(text)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    alevtina_config = {
        "name": "–ê–ª–µ–≤—Ç–∏–Ω–∞",
        "age": 30,
        "status": "–≤ —Ä–∞–∑–≤–æ–¥–µ —Å —Ä–µ–±–µ–Ω–∫–æ–º",
        "car": "–Ω–µ–≤–∑—Ä–∞—á–Ω–æ–µ –∞–≤—Ç–æ",
        "personality": {
            "aggressiveness": 0.7,
            "honesty": 0.9,
            "criticism": 0.8,
            "mood_spoiler": 0.8
        },
        "characteristic_phrases": characteristic_phrases[:20],
        "aggressive_phrases": aggressive_phrases[:15],
        "questioning_phrases": questioning_phrases[:15]
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    import os
    os.makedirs('alevtina', exist_ok=True)
    os.makedirs('alevtina/data', exist_ok=True)
    
    with open('alevtina/data/character_config.json', 'w', encoding='utf-8') as f:
        json.dump(alevtina_config, f, ensure_ascii=False, indent=2)
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ê–ª–µ–≤—Ç–∏–Ω—ã —Å–æ–∑–¥–∞–Ω–∞ –≤ alevtina/data/character_config.json")
    
    return alevtina_config

if __name__ == "__main__":
    messages = find_crazy_cat_messages()
    if messages:
        create_alevtina_character(messages)
    else:
        print("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏—è Crazy Cat –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è...")
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
        base_config = {
            "name": "–ê–ª–µ–≤—Ç–∏–Ω–∞", 
            "age": 30,
            "status": "–≤ —Ä–∞–∑–≤–æ–¥–µ —Å —Ä–µ–±–µ–Ω–∫–æ–º",
            "car": "–Ω–µ–≤–∑—Ä–∞—á–Ω–æ–µ –∞–≤—Ç–æ",
            "personality": {
                "aggressiveness": 0.7,
                "honesty": 0.9,
                "criticism": 0.8,
                "mood_spoiler": 0.8
            }
        }
        import os
        os.makedirs('alevtina/data', exist_ok=True)
        with open('alevtina/data/character_config.json', 'w', encoding='utf-8') as f:
            json.dump(base_config, f, ensure_ascii=False, indent=2)
        print("‚úÖ –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ê–ª–µ–≤—Ç–∏–Ω—ã —Å–æ–∑–¥–∞–Ω–∞")